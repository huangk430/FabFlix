{"ast":null,"code":"var _jsxFileName = \"/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckoutForm, \"I2mD8VtLUdS+pxXYAFWCJ5LM4cQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/CheckoutForm.jsx"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","retrievePaymentIntent","clientSecret","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACIC,cADJ,EAEIC,SAFJ,EAGIC,WAHJ,QAIO,yBAJP;;AAMA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACnC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAMI,QAAQ,GAAGH,WAAW,EAA5B;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACM,MAAL,EAAa;AACT;AACH;;AAELA,IAAAA,MAAM,CAACM,qBAAP,CAA6BC,YAA7B,EAA2CC,IAA3C,CAAgD,QAAuB;AAAA,UAAtB;AAAEC,QAAAA;AAAF,OAAsB;;AACnE,cAAQA,aAAa,CAACC,MAAtB;AACI,aAAK,WAAL;AACIP,UAAAA,UAAU,CAAC,oBAAD,CAAV;AACA;;AACJ,aAAK,YAAL;AACIA,UAAAA,UAAU,CAAC,6BAAD,CAAV;AACA;;AACJ,aAAK,yBAAL;AACIA,UAAAA,UAAU,CAAC,oDAAD,CAAV;AACA;;AACJ;AACIA,UAAAA,UAAU,CAAC,uBAAD,CAAV;AACA;AAZR;AAcC,KAfL;AAgBC,GArBQ,EAqBN,CAACH,MAAD,CArBM,CAAT;;AAuBA,QAAMW,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACb,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH;;AAEDI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAM;AAAES,MAAAA;AAAF,QAAY,MAAMd,MAAM,CAACe,cAAP,CAAsB;AAC1Cd,MAAAA,QAD0C;AAE1Ce,MAAAA,aAAa,EAAE;AACX;AACAC,QAAAA,UAAU,EAAE;AAFD;AAF2B,KAAtB,CAAxB,CAX8B,CAmB9B;AACA;AACA;AACA;AACA;;AACA,QAAIH,KAAK,CAACI,IAAN,KAAe,YAAf,IAA+BJ,KAAK,CAACI,IAAN,KAAe,kBAAlD,EAAsE;AAClEf,MAAAA,UAAU,CAACW,KAAK,CAACZ,OAAP,CAAV;AACH,KAFD,MAEO;AACHC,MAAAA,UAAU,CAAC,+BAAD,CAAV;AACH;;AAEDE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA/BD;;AAiCA,sBACI;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAEM,YAAlC;AAAA,4BACI,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,QAAQ,EAAEP,SAAS,IAAI,CAACJ,MAAd,IAAwB,CAACC,QAA3C;AAAqD,MAAA,EAAE,EAAC,QAAxD;AAAA,6BACJ;AAAM,QAAA,EAAE,EAAC,aAAT;AAAA,kBACGG,SAAS,gBAAG;AAAK,UAAA,SAAS,EAAC,SAAf;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAkD;AAD9D;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,YAFJ,EAQKF,OAAO,iBAAI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,gBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,YARhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA3EuBH,Y;UACLF,S,EACEC,W;;;KAFGC,Y","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    PaymentElement,\n    useStripe,\n    useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [message, setMessage] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (!stripe) {\n            return;\n        }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n        switch (paymentIntent.status) {\n            case \"succeeded\":\n                setMessage(\"Payment succeeded!\");\n                break;\n            case \"processing\":\n                setMessage(\"Your payment is processing.\");\n                break;\n            case \"requires_payment_method\":\n                setMessage(\"Your payment was not successful, please try again.\");\n                break;\n            default:\n                setMessage(\"Something went wrong.\");\n                break;\n            }\n        });\n    }, [stripe]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n\n        setIsLoading(true);\n\n        const { error } = await stripe.confirmPayment({\n            elements,\n            confirmParams: {\n                // Make sure to change this to your payment completion page\n                return_url: \"http://localhost:3000\",\n            },\n        });\n\n        // This point will only be reached if there is an immediate error when\n        // confirming the payment. Otherwise, your customer will be redirected to\n        // your `return_url`. For some payment methods like iDEAL, your customer will\n        // be redirected to an intermediate site first to authorize the payment, then\n        // redirected to the `return_url`.\n        if (error.type === \"card_error\" || error.type === \"validation_error\") {\n            setMessage(error.message);\n        } else {\n            setMessage(\"An unexpected error occurred.\");\n        }\n\n        setIsLoading(false);\n    };\n\n    return (\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\n            <PaymentElement id=\"payment-element\" />\n            <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n            </button>\n            {/* Show any error or success messages */}\n            {message && <div id=\"payment-message\">{message}</div>}\n        </form>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}