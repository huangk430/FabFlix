{"ast":null,"code":"var _jsxFileName = \"/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useUser } from \"hook/User\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport Idm from \"backend/idm\";\nimport { useNavigate } from \"react-router-dom\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledDiv = styled.div`\n \n  display: flex;\n  flex-direction: column;\n`;\n_c = StyledDiv;\nconst LoginDiv = styled.div`\n \n  display: flex;\n  align-items: center;\n`;\nconst StyledH1 = styled.h1`\n`;\nconst StyledInput = styled.input`\n`;\nconst StyledButton = styled.button`\n`;\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\n\nconst Register = () => {\n  _s();\n\n  const {\n    accessToken,\n    setAccessToken,\n    refreshToken,\n    setRefreshToken\n  } = useUser();\n  const {\n    register,\n    getValues,\n    handleSubmit\n  } = useForm();\n  const navigate = useNavigate();\n\n  const submitRegister = () => {\n    const email = getValues(\"email\");\n    const password = getValues(\"password\");\n    const payLoad = {\n      email: email,\n      password: password.split('')\n    };\n    Idm.register(payLoad).then(response => {\n      navigate(\"/login\");\n      alert(JSON.stringify(response.data, null, 2));\n    }).catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        width: '33ch'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, { ...register(\"email\"),\n        type: \"email\",\n        helperText: \" \",\n        id: \"demo-helper-text-aligned-no-helper\",\n        label: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"password\"),\n        type: \"password\",\n        helperText: \" \",\n        id: \"demo-helper-text-aligned-no-helper\",\n        label: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => {\n        handleSubmit(submitRegister);\n      },\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"7w5aaWPDuTbYJq4jfpU1Xqv4HHQ=\", false, function () {\n  return [useUser, useForm, useNavigate];\n});\n\n_c2 = Register;\nexport default Register;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledDiv\");\n$RefreshReg$(_c2, \"Register\");","map":{"version":3,"sources":["/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/Register.jsx"],"names":["React","useUser","styled","useForm","Idm","useNavigate","FormControl","TextField","Button","StyledDiv","div","LoginDiv","StyledH1","h1","StyledInput","input","StyledButton","button","Register","accessToken","setAccessToken","refreshToken","setRefreshToken","register","getValues","handleSubmit","navigate","submitRegister","email","password","payLoad","split","then","response","alert","JSON","stringify","data","catch","error","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useUser} from \"hook/User\";\nimport styled from \"styled-components\";\nimport {useForm} from \"react-hook-form\";\nimport Idm from \"backend/idm\";\nimport {useNavigate} from \"react-router-dom\";\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\n\nconst StyledDiv = styled.div`\n \n  display: flex;\n  flex-direction: column;\n`\nconst LoginDiv = styled.div`\n \n  display: flex;\n  align-items: center;\n`\n\nconst StyledH1 = styled.h1`\n`\n\nconst StyledInput = styled.input`\n`\n\nconst StyledButton = styled.button`\n`\n/**\n * useUser():\n * <br>\n * This is a hook we will use to keep track of our accessToken and\n * refreshToken given to use when the user calls \"login\".\n * <br>\n * For now, it is not being used, but we recommend setting the two tokens\n * here to the tokens you get when the user completes the login call (once\n * you are in the .then() function after calling login)\n * <br>\n * These have logic inside them to make sure the accessToken and\n * refreshToken are saved into the local storage of the web browser\n * allowing you to keep values alive even when the user leaves the website\n * <br>\n * <br>\n * useForm()\n * <br>\n * This is a library that helps us with gathering input values from our\n * users.\n * <br>\n * Whenever we make a html component that takes a value (<input>, <select>,\n * ect) we call this function in this way:\n * <pre>\n *     {...register(\"email\")}\n * </pre>\n * Notice that we have \"{}\" with a function call that has \"...\" before it.\n * This is just a way to take all the stuff that is returned by register\n * and <i>distribute</i> it as attributes for our components. Do not worry\n * too much about the specifics of it, if you would like you can read up\n * more about it on \"react-hook-form\"'s documentation:\n * <br>\n * <a href=\"https://react-hook-form.com/\">React Hook Form</a>.\n * <br>\n * Their documentation is very detailed and goes into all of these functions\n * with great examples. But to keep things simple: Whenever we have a html with\n * input we will use that function with the name associated with that input,\n * and when we want to get the value in that input we call:\n * <pre>\n * getValue(\"email\")\n * </pre>\n * <br>\n * To Execute some function when the user asks we use:\n * <pre>\n *     handleSubmit(ourFunctionToExecute)\n * </pre>\n * This wraps our function and does some \"pre-checks\" before (This is useful if\n * you want to do some input validation, more of that in their documentation)\n */\nconst Register = () => {\n    const {\n        accessToken, setAccessToken,\n        refreshToken, setRefreshToken\n    } = useUser();\n\n\n    const {register, getValues, handleSubmit} = useForm();\n    const navigate = useNavigate();\n\n    const submitRegister = () => {\n        const email = getValues(\"email\");\n        const password = getValues(\"password\");\n\n        const payLoad = {\n            email: email,\n            password: password.split('')\n        }\n\n        Idm.register(payLoad)\n            .then(response => {\n                navigate(\"/login\");\n                alert(JSON.stringify(response.data, null, 2))\n            })\n            .catch(error => alert(JSON.stringify(error.response.data, null, 2)))\n    }\n\n    return (\n        <StyledDiv>\n\n            <FormControl sx={{ width: '33ch' }}>\n\n                <TextField\n                    {...register(\"email\")}\n                    type=\"email\"\n                    helperText=\" \"\n                    id=\"demo-helper-text-aligned-no-helper\"\n                    label=\"Email\"\n                />\n                <TextField\n                    {...register(\"password\")}\n                    type=\"password\"\n                    helperText=\" \"\n                    id=\"demo-helper-text-aligned-no-helper\"\n                    label=\"Password\"\n                />\n            </FormControl>\n            <Button variant=\"outlined\" onClick={() => {handleSubmit(submitRegister)}}>Register</Button>\n        </StyledDiv>\n    );\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}