{"ast":null,"code":"var _jsxFileName = \"/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/CheckoutForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { orderComplete } from \"../backend/orders\";\nimport { useUser } from \"../hook/User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n\n  const {\n    accessToken\n  } = useUser();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const completeOrder = (paymentIntentId, accessToken) => {\n    const payload = {\n      paymentIntentId: paymentIntentId\n    };\n    orderComplete(payload, accessToken).then(response => {\n      alert(JSON.stringify(response.data, null, 2));\n    }).catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    });\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"payment-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n        id: \"payment-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"payment-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckoutForm, \"xMhAKXcAA2nKTHyemvceO7yBQvg=\", false, function () {\n  return [useUser, useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/kellyhuang/Documents/CS122B/FRONTEND/CS122B-FE-Starter/src/pages/CheckoutForm.jsx"],"names":["React","useEffect","useState","Button","PaymentElement","useStripe","useElements","orderComplete","useUser","CheckoutForm","accessToken","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","completeOrder","paymentIntentId","payload","response","alert","JSON","stringify","data","catch","error","handleSubmit","e","preventDefault","confirmPayment","confirmParams","return_url","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n    PaymentElement,\n    useStripe,\n    useElements\n} from \"@stripe/react-stripe-js\";\nimport { orderComplete } from \"../backend/orders\";\nimport {useUser} from \"../hook/User\";\n\n\nexport default function CheckoutForm() {\n    const { accessToken } = useUser();\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [message, setMessage] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (!stripe) {\n            return;\n        }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n        \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n        return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n        switch (paymentIntent.status) {\n            case \"succeeded\":\n                setMessage(\"Payment succeeded!\");\n                break;\n            case \"processing\":\n                setMessage(\"Your payment is processing.\");\n                break;\n            case \"requires_payment_method\":\n                setMessage(\"Your payment was not successful, please try again.\");\n                break;\n            default:\n                setMessage(\"Something went wrong.\");\n                break;\n            }\n        });\n    }, [stripe]);\n\n    const completeOrder = (paymentIntentId, accessToken) => {\n        const payload = {\n            paymentIntentId: paymentIntentId\n        }\n        orderComplete(payload, accessToken)\n            .then(\n                response => {\n                    alert(JSON.stringify(response.data, null, 2))\n                })\n            .catch(error => alert(JSON.stringify(error.response.data, null, 2)));\n\n    }\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n\n        setIsLoading(true);\n\n        const { error } = await stripe.confirmPayment({\n            elements,\n            confirmParams: {\n                // Make sure to change this to your payment completion page\n                return_url: \"http://localhost:3000\",\n            },\n        });\n\n\n        if (error.type === \"card_error\" || error.type === \"validation_error\") {\n            setMessage(error.message);\n        } else {\n            setMessage(\"An unexpected error occurred.\");\n        }\n\n        setIsLoading(false);\n    };\n\n    return (\n        <div>\n\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\n            <PaymentElement id=\"payment-element\" />\n            <br/>\n            {/* Show any error or success messages */}\n            {message && <div id=\"payment-message\">{message}</div>}\n        </form>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}